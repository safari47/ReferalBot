from aiogram import Router, F
from aiogram.types import (Message, BufferedInputFile)
from loguru import logger
from keyboards.keyboards import (main_kb,admin_kb,fsm_button,broadcast_button)
from config.config import bot, settings
from db.dao import get_all_users, add_chanel, delete_chanel
from utils.utils import is_channel_valid, broadcast_send
from fsm.fsm import SubChanel, DeleteChanel, BroadcastMessage
from aiogram.fsm.context import FSMContext
import json

router = Router()



@router.message(lambda message: message.text == "üßç‚Äç‚ôÇÔ∏è USER INFO" and message.from_user.id == settings.ADMIN_ID)
async def user_info(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
        all_users = await get_all_users()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON-—Å—Ç—Ä–æ–∫—É
        users_json = json.dumps(all_users, indent=4)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Å—Ç—Ä–æ–∫–∏
        data = BufferedInputFile(
            file=users_json.encode("utf-8"), filename="users_data.json"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_document(document=data)

    except Exception as e:
        # –†–∞–±–æ—Ç–∞–µ–º —Å –æ—à–∏–±–∫–∞–º–∏
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.message(lambda message: message.text == "‚ùå –û–¢–ú–ï–ù–ê")
async def cancel_action(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup = main_kb(message.from_user.id))

@router.message(lambda message: message.text == "‚úÖ ADD CHANEL SUB" and message.from_user.id == settings.ADMIN_ID)
async def add_chanel_sub(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(SubChanel.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–Ω–∞–ª–∞:", reply_markup=fsm_button())


@router.message(SubChanel.title)
async def add_chanel_sub_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–Ω–∞–ª–∞
    await state.set_state(SubChanel.url)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, @example –∏–ª–∏ https://t.me/example):",
        reply_markup=fsm_button(),
    )

@router.message(SubChanel.url)
async def add_chanel_sub_url(message: Message, state: FSMContext, bot):
    channel_url = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    if not await is_channel_valid(channel_url, bot):
        await message.answer(
            "–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=fsm_button(),
        )
        return  # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ

    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(url=channel_url)
    fsm_chanel = await state.get_data()
    title = fsm_chanel.get("title")
    url = fsm_chanel.get("url")

    await add_chanel(title=title, url=url)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await state.clear()
    await message.answer(
        text=f"–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:\n\n**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {title}\n**–°—Å—ã–ª–∫–∞:** {url}",
        reply_markup=main_kb(message.from_user.id),
    )

@router.message(lambda message: message.text == "‚ùå DEL CHANEL SUB" and message.from_user.id == settings.ADMIN_ID)
async def del_chanel_sub(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(DeleteChanel.url)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ url –∫–∞–Ω–∞–ª–∞:", reply_markup=fsm_button())


@router.message(DeleteChanel.url)
async def del_chanel_sub_url(message: Message, state: FSMContext, bot):
    channel_url = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    if not await delete_chanel(url=channel_url):
        await message.answer(
            "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=fsm_button(),
        )
        return  # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ
    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –±–∞–∑—ã
    await message.answer(
        text=f"–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=main_kb(message.from_user.id),
    )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(F.text == "üì© BROADCAST MESSAGE")
async def broadcast_message(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(BroadcastMessage.message)
    await message.answer(
    "üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!\n\n"
    "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
    "- –¢–µ–∫—Å—Ç üñäÔ∏è\n"
    "- –§–æ—Ç–æ üñºÔ∏è\n"
    "- –í–∏–¥–µ–æ üé•\n\n"
    "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å –∫ –≤–∞—à–µ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.\n\n"
    "üëâ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
    reply_markup=fsm_button(),
)


@router.message(BroadcastMessage.message)
async def broadcast_message_text(message: Message, state: FSMContext):
    await state.update_data(message=message)
    await state.set_state(BroadcastMessage.button)
    await message.answer(
    "üîò –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?\n\n"
    "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá\n\n"
    "‚û°Ô∏è –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.",
    reply_markup=broadcast_button(),
)


@router.message(BroadcastMessage.button)
async def broadcast_message_button(message: Message, state: FSMContext):
    await state.update_data(button=message)
    await state.set_state(BroadcastMessage.url)
    await message.answer(
    "üîó –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?\n\n"
    "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∏–∂–µ üëá\n\n"
    "‚û°Ô∏è –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.",
    reply_markup=broadcast_button(),
)


@router.message(BroadcastMessage.url)
async def broadcast_message_url(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π URL –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(url=message)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    content_type = data.get("message").content_type
    broadcast_message = data.get("message")
    button = data.get("button")
    url = data.get("url")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
    user_data = await get_all_users()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    progress_message = await message.answer(
        "‚ûñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏... ‚ûñ\n\n"
        "‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>0</b>\n"
        "‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>0</b>\n\n"
        "üì§ –ü—Ä–æ–≥—Ä–µ—Å—Å: <b>0%</b>"
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏
    good, bad = await broadcast_send(
        users=user_data,
        message=broadcast_message,
        content_type=content_type,
        button=button,
        url=url,
        progress_message=progress_message
    )
    await progress_message.delete()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    await message.answer(
        f"‚ûñ –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ‚ûñ\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>{good}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å: <b>{bad}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
        f"üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_kb()
    )
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.message(
    lambda message: message.text == "‚öôÔ∏è ADMIN PANEL"
    and message.from_user.id == settings.ADMIN_ID
)
async def admin_panel(message: Message):
    panel_admin = await message.answer(text="ADMIN PANEL OPEN", reply_markup=admin_kb())
    await message.delete()


@router.message(F.text == "‚¨ÖÔ∏è BACK TO MAIN MENU")
async def admin_panel_back(message: Message):
    panel_admin_back = await message.answer(
        text="BACK TO MAIN MENU", reply_markup=main_kb(user_id=message.from_user.id)
    )
    await message.delete()
